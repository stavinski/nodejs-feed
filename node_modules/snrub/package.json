{
  "author": {
    "name": "Michael Bridgen",
    "email": "mikeb@squaremobius.net"
  },
  "name": "snrub",
  "description": "PuSH (pubsubhubbub) subscriber as Connect middleware",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/squaremo/snrub.git"
  },
  "engines": {
    "node": "~0.6.4"
  },
  "scripts": {
    "test": "make test"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "~0.10",
    "connect": "~2.3"
  },
  "optionalDependencies": {},
  "readme": "# PuSH subscriber as Connect middleware\n\nThis module provides a [PuSH\n(pubsubhubbub)](http://pubsubhubbub.appspot.com) subscriber. This is a\nobject with methods for subscribing to, and unsubscribing from, topics\non PuSH hubs.\n\nThe object gives you a middleware you can use with\n[Connect](http://www.senchalabs.org/connect/connect.html) or\n[Express](http://expressjs.com/guide.html); provided you host it\nsomewhere suitably accessible via HTTP, it will then accept HTTP\nupdates from the hubs and emit them as events.\n\n    var subscriber = require('snrub')\n      .createSubscriber({'host': 'example.com:8000'});\n    var app = connect(subscriber.middleware());\n\n    subscriber.subscribe('http://pubsubhubbub.appspot.com', // hub\n                         'http://blog.cloudfoundry.com/feed');\n    subscriber.on('subscribe', function(topic) {\n      console.log(\"Subscribed to \" + topic;)\n    });\n    subscriber.on('update', function(topic, content) {\n      console.log(\"Content from \" + topic);\n      console.log(content);\n    });\n\n    app.listen(8000); // pretending we are on host example.com\n\nA demo is available at http://snrub-demo.cloudfoundry.com/.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/squaremo/snrub/issues"
  },
  "_id": "snrub@0.0.2",
  "dist": {
    "shasum": "fb9384cf5379bc0fd81174ef0a789ad1095ace14"
  },
  "_from": "snrub@*",
  "_resolved": "https://registry.npmjs.org/snrub/-/snrub-0.0.2.tgz"
}
